// ----------------------------------------------------------------------------
// This source file is part of BehaveRT 
// http://isis.dia.unisa.it/projects/behavert/
//
// Copyright (c) 2008-2010 ISISLab - University of Salerno
// Original author: Bernardino Frola <frola@dia.unisa.it>
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

// ----------------
// Change log
//
// 03-09 bf: Created
//
// ----------------

#pragma once

#include "BehaveRT.h"
#include "Schooling_kernel.cuh"

/// Autogenerated namespace
namespace Schooling
{
	/**
		\brief Put here brief the description of the plugIn
		
		Put here the detailed description of the plugIn
	*/
	template <class Super>
	class SchoolingPlugIn: public Super, public SimEnginePlugIn
	{
	public:
		// /////////////////////////////////////////////////////
		// Constructor/Descructor

		/// Defautl constructor: provides plugIn installation
		SchoolingPlugIn() { SimEnginePlugIn::installPlugIn(); }

		/// Defautl constructor: provides plugIn uninstallation
		~SchoolingPlugIn() { SimEnginePlugIn::uninstallPlugIn(); }
		
		const std::string name() { return "SchoolingPlugIn"; }	

		/// Dependeciens: none
		const DependenciesList plugInDependencies() 
		{ 
			DependenciesList dependencies;
						dependencies.push_back("Body3DPlugIn");
			dependencies.push_back("EnvGrid3DPlugIn");
			dependencies.push_back("Proximity3DPlugIn");
			dependencies.push_back("OpenSteerWrapperPlugIn");

			return dependencies;	
		}

		// ////////////////////////////////////////////////////
		// Methods
	private:
		/// @override
		void install();
		
		/// @override
		void uninstall();

	public:
		/// @override
		void reset();

		/// @override
		void update(const float elapsedTime);

		// Custom operations
	public:
		// Put here the functionalities
		void calcRepulsion();
		void calcAttractionOrientation();
		void calcMovement();

		void animateSchool();

		// ////////////////////////////////////////////////////
		// Fields	
	protected:
		// Put here features

		BehaveRT::DeviceArrayWrapper<float4>* m_RandomValues;
		
	};
}

using namespace Schooling;

// --------------------------------------------------------------
// --------------------------------------------------------------
// --------------------------------------------------------------
// Implementation
template <class Super>
void SchoolingPlugIn<Super>::install()
{
	// Put here parameters loading from config file
	// The first letter of ParamType must be capital
	// Example:
	// read_config_param(Schooling, paramName, ParamType);
	
	// Attraction and orientation area radius
	hSchoolingParams.r_p = hProximity3DParams.commonSearchRadius;

	// Repulsion area radius
	hSchoolingParams.r_r = 1.0;

	// Constant speed
	hSchoolingParams.s = 3.0;//3.0 VIDEO
	//hSchoolingParams.s = 1.0;//1.0 BENCH

	// Attraction weight
	hSchoolingParams.w_a = 1.0f;

	// Orientation weight
	hSchoolingParams.w_o = 16.0f; // 16.0f VIDEO
	//hSchoolingParams.w_o = 16.0f; // 16.0f BENCH

	// Max turning angle
	hSchoolingParams.theta = cos(0.1); // 0.1 VIDEO
	//hSchoolingParams.theta = cos(2.0); // 2.0 BENCH
	
	// Blind area angle 2PI - eta
	hSchoolingParams.eta = cos(3.05); //3.05

	// Random orientation delta (mean 0)
	hSchoolingParams.delta = 0.01;

	// Generates float4 random numbers
	hSchoolingParams.NPerRng = 4 * hBody3DParams.numBodies / MT_RNG_COUNT;
	hSchoolingParams.randomDeviationWeight = 0.1;
		
	char* dat_path = "Data\\MersenneTwister.dat";

	Schooling_loadMTGPU(dat_path);
	
	// Put here the feature allocation. Each feature is a DeviceArrayWrapper object
	// Example:
	// m_AgentHash = new CrowdSteer::DeviceArrayWrapper<uint2>(
	//	m_CommonRes.getDeviceInterface(), 
	//	hBody3DParams.numBodies);

	m_RandomValues = new BehaveRT::DeviceArrayWrapper<float4>(
		m_CommonRes.getDeviceInterface(), 
		hBody3DParams.numBodies, 1);

	m_RandomValues->bindToField(hSchoolingFields.randomValue);

	// When you want to transfert params and fields to device
	// use this function:
	Schooling::Schooling_copyFieldsToDevice();
}

// --------------------------------------------------------------

template <class Super>
void SchoolingPlugIn<Super>::uninstall()
{
	// Put here memory deallcation
	// Example
	// delete m_AgentHash

	
}

// --------------------------------------------------------------

template <class Super>
void SchoolingPlugIn<Super>::reset()
{
	Super::reset(); // MANDATORY OPERATION


}

// --------------------------------------------------------------

template <class Super>
void SchoolingPlugIn<Super>::update(const float elapsedTime)
{
	Super::update(elapsedTime); // MANDATORY OPERATION

	// Insert here the default update operation
}

// --------------------------------------------------------------
// --------------------------------------------------------------

template <class Super>
void SchoolingPlugIn<Super>::animateSchool()
{
	m_CommonRes.getDeviceInterface()->kernelCall(
		hBody3DParams.numBodies, 
		m_CommonRes.getDeviceInterface()->getHostSimParams().commonBlockDim,
		Schooling_animateSchoolRef(), 
		&Schooling_beforeKernelCall, 
		&Schooling_afterKernelCall);	

	m_Pos->swapPosReadWrite();
	m_Forward->swapPosReadWrite();

	m_CommonRes.getDeviceInterface()->threadSync();
	
}

// --------------------------------------------------------------

template <class Super>
void SchoolingPlugIn<Super>::calcRepulsion()
{
	m_CommonRes.getDeviceInterface()->kernelCall(
		hBody3DParams.numBodies, 
		m_CommonRes.getDeviceInterface()->getHostSimParams().commonBlockDim,
		Schooling_repulsionRef(), 
		&Schooling_beforeKernelCall, 
		&Schooling_afterKernelCall);

	m_SteerForce->swapPosReadWrite();
	m_CommonRes.getDeviceInterface()->threadSync();
}

// --------------------------------------------------------------

template <class Super>
void SchoolingPlugIn<Super>::calcAttractionOrientation()
{
	m_CommonRes.getDeviceInterface()->kernelCall(
		hBody3DParams.numBodies, 
		m_CommonRes.getDeviceInterface()->getHostSimParams().commonBlockDim,
		Schooling_attractionOrientationRef(), 
		&Schooling_beforeKernelCall, 
		&Schooling_afterKernelCall);

	m_SteerForce->swapPosReadWrite();
	m_CommonRes.getDeviceInterface()->threadSync();
}

// --------------------------------------------------------------

template <class Super>
void SchoolingPlugIn<Super>::calcMovement()
{
	if (hSchoolingParams.randomDeviationWeight > 0.0)
	{
		Schooling_seedMTGPU(timeGetTime());

		m_CommonRes.getDeviceInterface()->kernelCall(
			hBody3DParams.numBodies, 
			m_CommonRes.getDeviceInterface()->getHostSimParams().commonBlockDim,
			Schooling_generateRandomValuesRef(), 
			&Schooling_beforeKernelCall, 
			&Schooling_afterKernelCall);

		m_RandomValues->swapPosReadWrite();
		m_CommonRes.getDeviceInterface()->threadSync();
	}

	/*m_RandomValues->copyArrayFromDevice(0, 10);

	for(int i = 0; i < 10; i ++)
	{
		float rValue = m_RandomValues->getHostArrayElement(i);
		printf("%f ", rValue);
	}

	printf("\n");*/

	m_CommonRes.getDeviceInterface()->kernelCall(
		hBody3DParams.numBodies, 
		m_CommonRes.getDeviceInterface()->getHostSimParams().commonBlockDim,
		Schooling_moveRef(), 
		&Schooling_beforeKernelCall, 
		&Schooling_afterKernelCall);

	m_Pos->swapPosReadWrite();
	m_Forward->swapPosReadWrite();
	m_CommonRes.getDeviceInterface()->threadSync();

}

// --------------------------------------------------------------
