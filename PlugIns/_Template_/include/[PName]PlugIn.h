/*
	Created by Bernardino Frola - ISISLab - University of Salerno.
	4th Jan 09
*/

#pragma once

#include "CrowdSteer.h"
#include "[PName]_kernel.cuh"

/// Autogenerated namespace
namespace [PName]
{
	/**
		\brief Put here brief the description of the plugIn
		
		Put here the detailed description of the plugIn
	*/
	template <class Super>
	class [PName]PlugIn: public Super, public SimEnginePlugIn
	{
	public:
		// /////////////////////////////////////////////////////
		// Constructor/Descructor

		/// Defautl constructor: provides plugIn installation
		[PName]PlugIn() { SimEnginePlugIn::installPlugIn(); }

		/// Defautl constructor: provides plugIn uninstallation
		~[PName]PlugIn() { SimEnginePlugIn::uninstallPlugIn(); }
		
		const std::string name() { return "[PName]PlugIn"; }	

		/// Dependeciens: none
		const DependenciesList plugInDependencies() 
		{ 
			DependenciesList dependencies;
			// Auto-generated code START
			[PDependencies]
			// Auto-generated code END
			return dependencies;	
		}

		// ////////////////////////////////////////////////////
		// Methods
	private:
		/// @override
		void install();
		
		/// @override
		void uninstall();

	public:
		/// @override
		void reset();

		/// @override
		void update(const float elapsedTime);

		// Custom operations
	public:
		// Put here the functionalities
		void [PName]_functionalityExample();

		// ////////////////////////////////////////////////////
		// Fields	
	protected:
		// Put here features
		// Auto-generated code START
		[PFeaturesDeclaration]
		// Auto-generated code END
	};
}

using namespace [PName];

// --------------------------------------------------------------
// --------------------------------------------------------------
// --------------------------------------------------------------
// Implementation
template <class Super>
void [PName]PlugIn<Super>::install()
{
	// Put here parameters loading from config file
	// The first letter of ParamType must be capital
	// Example:
	// read_config_param([PName], paramName, ParamType);
	

	
	// Put here the feature allocation. Each feature is a DeviceArrayWrapper object
	// Example:
	// m_AgentHash = new CrowdSteer::DeviceArrayWrapper<uint2>(
	//	community.getDeviceInterface(), 
	//	hBody3DParams.numBodies);

	// Auto-generated code START
	[PFeaturesAllocation]
	// Auto-generated code END

	// When you want to transfert params and fields to device
	// use this function:
	// Auto-generated code START
	[PName]::[PName]_copyFieldsToDevice();
	// Auto-generated code END
}

// --------------------------------------------------------------

template <class Super>
void [PName]PlugIn<Super>::uninstall()
{
	// Put here memory deallcation
	// Example
	// delete m_AgentHash

	// Auto-generated code START
	[PFeaturesDeallocation]
	// Auto-generated code END
}

// --------------------------------------------------------------

template <class Super>
void [PName]PlugIn<Super>::reset()
{
	Super::reset(); // MANDATORY OPERATION
}

// --------------------------------------------------------------

template <class Super>
void [PName]PlugIn<Super>::update(const float elapsedTime)
{
	Super::update(elapsedTime); // MANDATORY OPERATION

	// Insert here the default update operation
}

// --------------------------------------------------------------
// --------------------------------------------------------------

template <class Super>
void [PName]PlugIn<Super>::[PName]_functionalityExample();
{
	community.getDeviceInterface()->kernelCall(
		hBody3DParams.numBodies, 
		community.getDeviceInterface()->getHostSimParams().commonBlockDim,
		BehaveRT_getKernelRef( [PName]Example_kernel ), 
		&Proximity3D_beforeKernelCall, 
		&Proximity3D_afterKernelCall);	
}

// --------------------------------------------------------------